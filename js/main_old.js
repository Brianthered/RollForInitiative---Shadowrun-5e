// VARIABLES
var list = []; // Array to hold players in the game
var pass = 1; // Element holds the current combat pass
var selectedPlayer = null; // Element holds the Player object of the currently selected player
var x; // Counter variable
var i; // Counter variable
var index; // Counter variable for array
var randomNum; // Stores the random number generated by getRandomInt
var score; // Holds total score of the selected random numbers
var int; // Counter variable
var p1; // Holder for a player object
var hits = 0;
var numOfDiceRolled = 0;
var ones = 0;

// Startup Functions
addOptionsButtons(); // Adds the toolbox buttons.
testPlayers();

// Constructor for Player class
function Player(name, baseScore, dice, totalScore, npc, seize) {
    this.name = name; // Name of character
    this.npc = npc; // True if auto-rolled, False if not
    this.base = baseScore; // Base score for NPCs
    this.dice = dice; // Dice to roll for NPCs
    this.actionTaken = false; // Whether the player has taken an action this turn.
    this.totalScore = totalScore; // Holds the current initiative score total
    // Function to determine if this player is tied with another player. Returns true
    // if they are tied, false if not.
    this.isTied = function(p1) {
        return (this.totalScore === p1.totalScore);
    };
    this.seize = seize; // Holds whether the player is "Seizing the Initiative"
    this.overwatch = 0; // Holds current overwatch score.
}

/***************************
 * Player Helper Functions *
 ***************************/

/*
 * @param int base: Base score of NPC
 * @param int dice: Number of additional dice for NPC
 * @returns int score: Returns total score of base + dice total
 */

// Determines total score for NPCs by rolling the selected number of dice and
// adding to current score.
function getTotalScore(base, dice) {
    randomNum = 0;
    for (x = 0; x < dice; x++) {
        randomNum = randomNum + getRandomInt();
    }
    score = Number(base) + Number(randomNum);
    return score;
}

// Roll a dice, returns 1 through 6.
function getRandomInt() {
    return Math.floor((Math.random() * 6) + 1);
}

// Success checker
function getHits(numDice, edged) {
    i = 0;
    sixes = 0;
    ones = 0;
    for (x = 0; x < numDice; x++) {
        randomNum = getRandomInt();
        if (randomNum >= 5) {
            i++;
        }
        if (randomNum === 6) {
            sixes++;
        }
        if (randomNum === 1) {
            ones++;
        }
    }
    if (edged) {
        while (sixes > 0) {
            randomNum = getRandomInt();
            if (randomNum >= 5) {
                i++;
            }
            if (randomNum === 6) {
                sixes++;
            }
            if (randomNum === 1) {
                ones++;
            }
            sixes--;
        }
    }
    glitchCheck(numDice, ones, i);
    return i;
}

// Check the roll for glitches
function glitchCheck(numDice, ones, hits) {
    glitchLabel = document.getElementById("glitchLabel");
    half = Math.floor(numDice/2);
    if (ones > half) {
        showElement(glitchLabel);
        if (hits === 0) {
            glitchLabel.innerHTML = "CRITICAL GLITCH";
        } else {
            glitchLabel.innerHTML = "GLITCH";
        }
    } else {
        hideElement(glitchLabel);
        glitchLabel.innerHTML = "";
    }
}

// Take info from form and roll dice and determine number of successes.
function rollDice() {
    document.getElementById("glitchLabel").innerHTML = "";
    var hitsLabel = document.getElementById("hitsLabel");
    var edgeCheck = document.getElementById("edgeCheck").checked;
    numOfDiceRolled = Number(document.getElementById("numOfDiceSpin").value);
    hits = getHits(numOfDiceRolled, edgeCheck);
    hitsLabel.innerHTML = "Hits: " + hits;
    logMessage("GM Rolled " + numOfDiceRolled + " dice (edge: " + edgeCheck + ") and got " + hits + " hits.");
    if (!edgeCheck && (hits < numOfDiceRolled)) {
        document.getElementById("secondChanceButton").className = "scndChance";
    } else {
        document.getElementById("secondChanceButton").className = "hidden";
    }
}

function secondChance() {
    dice = numOfDiceRolled - hits;
    newHits = getHits(dice, false) + hits;
    document.getElementById("hitsLabel").innerHTML = "Hits: " + newHits;
    document.getElementById("secondChanceButton").className = "hidden";
    glitchCheck(numOfDiceRolled, ones, newHits);
    logMessage("GM used Second Chance and got " + (newHits - hits) + " new hits.");
}

// Takes the information provided by the New Player form and creates a Player
// object and adds the list array.
function addPlayer(form) {
    var name = document.forms["newPlayerForm"]["nameInput"].value;
    if (name === "") {
        alert("No name entered.");
        return false;
    } else {
        var npc = document.forms["newPlayerForm"]["npcRadio"].checked;
        var base = Number(document.forms["newPlayerForm"]["scoreSpin"].value);
        var dice = Number(document.forms["newPlayerForm"]["diceSpin"].value);
        var seize = document.forms["newPlayerForm"]["seizeCheck"].checked;
        
        // If the new combatant is coming in after the first pass, subtract 10 
        // for each combat pass they missed.
        if (!npc) {
            score = base - ((pass - 1) * 10);
        } else {
            score = getTotalScore(base, dice) - ((pass - 1) * 10);
        }
        
        // Create the player object
        var player = new Player(name, base, dice, score, npc, seize);
        list.push(player); // Adds to the list
        logMessage("New Player " + name + " has been added.");
        resetForm(form); // Resets the new player form
        sortPlayers(); // Sort and display the player list.
        return false; // Do not submit form.
    }
}

// Resets a form to default values
function resetForm(form) {
    var frm_elements = form.elements;
    for (i = 0; i < frm_elements.length; i++)
    {
        field_type = frm_elements[i].type.toLowerCase();
        switch (field_type)
        {
        case "text":
        case "password":
        case "textarea":
        case "hidden":
            frm_elements[i].value = "";
            break;
        case "radio":
        case "checkbox":
            if (frm_elements[i].checked)
            {
                frm_elements[i].checked = false;
            }
            break;
        case "select-one":
        case "select-multi":
            frm_elements[i].selectedIndex = -1;
            break;
        case "number":
            frm_elements[i].value = 1;
            break;
        default:
            break;
        }   
    }
    document.getElementById("diceSpinLabel").className = "hidden";
    document.getElementById("diceSpin").className = "hidden";
}

function resetSpinners() {
    document.getElementById("modScoreSpin").value = 0;
    document.getElementById("modDiceSpin").value = 0;
    document.getElementById("modBaseSpin").value = 0;
}

/******************
 * Sort Functions *
 ******************/

// Sorts the player list. Resets the spinners. Displays players.
function sortPlayers() {
    list.sort(compareByScore);
    resetSpinners();
    displayPlayers();
}

// Compare function. Compares Seize the Initiative first. If a player is Seizing
// then put at the top. Otherwise, compare by total score with higher on top.
function compareByScore(a, b) {
    if (a.seize && b.seize || !a.seize && !b.seize) {
        i = b.totalScore - a.totalScore;
        return i;
    } else if (a.seize && !b.seize) {
        return -1;
    } else {
        return 1;
    }
}

// Goes through array to find the next player who has an action available this
// pass. If none, goes to next pass or next round.
function getNextPlayer() {
    if (list.length > 0) {
        var allActionsTaken = true; // Tests if all actions have been taken.
        p1 = null;
        var playerString = ""; // Holds the string to return for who is up next.
        for (index = 0; index < list.length; index++) {
            x = list[index]; // Hold the current player in the iteration
            // Determine if current player can take an action
            if ((!x.actionTaken) && (x.totalScore > 0)) 
            {
                // Compare to previous player to see if tied or if previous player
                // is seizing the initiative
                if (p1 !== null) 
                {
                    if (!x.isTied(p1) || (p1.seize && !x.seize))
                    {
                        break;
                    } else 
                    {
                        // If players are tied, add them both to the label.
                        playerString = playerString.concat(" & ");
                        playerString = playerString.concat(x.name + ": " + x.totalScore.toString());
                        x.actionTaken = true;
                        allActionsTaken = false;
                        p1 = x; // Check next player
                    }
                } else 
                {
                    // If this is first player, add name to the list and go to next player
                    playerString = playerString.concat(x.name + ": " + x.totalScore.toString());
                    x.actionTaken = true;
                    allActionsTaken = false;
                    p1 = x;
                }
            }
        }
        
        // If the list fully iterates and no one has a turn available, go to the next combat pass.
        if (allActionsTaken) {
            logMessage("All players have gone this turn. Combat pass " + pass + " complete.");
            nextPass();
        } else {
            // Otherwise, set the next player label to who is going next.
            document.getElementById("nextPlayerLabel").innerHTML = playerString;
            logMessage(playerString + " have taken their actions.");
        }
        // Add the combat pass label
        document.getElementById("passLabel").innerHTML = "Combat pass:" + pass;
        // Hide the new player form
        document.getElementById("newPlayerDiv").className = "hidden";
        sortPlayers(); // Sort the player list.
    }
}

// If the Auto-Roll Dice button is checked, show the + d6 area, if not, hide.
function selectNPC() {
    if (document.getElementById("npcRadio").checked) {
        document.getElementById("diceSpin").disabled = false;
        document.getElementById("diceSpinLabel").className = "diceSpin";
        document.getElementById("diceSpin").className = "diceSpin";
        // document.getElementById("blitzCheck").className = "blitzer";
        // document.getElementById("blitzLabel").className = "blitzer";
    } else {
        document.getElementById("diceSpin").disabled = true;
        document.getElementById("diceSpinLabel").className = "hidden";
        document.getElementById("diceSpin").className = "hidden";
        // document.getElementById("blitzCheck").className = "hidden";
        // document.getElementById("blitzLabel").className = "hidden";
    }
}

// Goes to next combat pass. If no one else has turns, go to next round.
function nextPass() {
    var roundDone = true;
    
    // Subtract 10 from everyone's score
    for (index = 0; index < list.length; index++) {
        list[index].totalScore = list[index].totalScore - 10;
        
        // Check if anyone still has positive initiative
        if (list[index].totalScore > 0) {
            roundDone = false;
            list[index].actionTaken = false;
        }
    }
    
    // If not actions remain, go to the next round
    if (roundDone) {
        document.getElementById("nextPlayerLabel").innerHTML = "Round Complete. Gathering new scores.";
        logMessage("Round Complete.");
        nextRound();
    } else {
        // If actions do remain, increment pass counter.
        document.getElementById("nextPlayerLabel").innerHTML = "Next Pass.";
        pass++;
        logMessage("Beginning Combat Pass " + pass + ".");
    }
}

// Go to the next round. Gather scores for PCs and roll for NPCs. Prompt to check for STI.
function nextRound() {
    pass = 1;
    
    // Reset players. Set their Seize the Initiative and action taken flag to false.
    for (index = 0; index < list.length; index++) {
        list[index].seize = false;
        list[index].actionTaken = false;
        if (list[index].npc) {
            list[index].totalScore = getTotalScore(list[index].base, list[index].dice);
        } else {
            var score = prompt("What is " + list[index].name + "'s initiative score this round?", "");
            if (Number(score) !== NaN && Number(score) > 0) {
                list[index].totalScore = score;
            } else {
                prompt("Invalid input. Please enter " + list[index].name + "'s initiative score.", "");
            }
        }
    }
    alert("If any players are Seizing The Initiative this round, please select them from the list now.");
}

// Show the New Player Form when user presses New Player button.
function showNewPlayerForm() {
    document.getElementById("newPlayerDiv").className = "newPlayer";
    document.getElementById("toolbox").className = "hidden";
    if (selectedPlayer !== null) {
        index = list.indexOf(selectedPlayer);
        document.getElementById(index).style.border = "solid #00FF00";    
    }
    selectedPlayer = null;
}

// Show the dice roller when button is clicked
function showDiceArea() {
    var diceArea = document.getElementById("rollDiceDiv");
    var diceButton = document.getElementById("diceRollerButton");
    if (diceArea.className === "hidden") {
        diceArea.className = "diceArea";
        diceButton.innerHTML = "Hide Dice Roller";
    } else {
        diceArea.className = "hidden";
        diceButton.innerHTML = "Show Dice Roller";
    }
}

// Take the list of players and display them in a list with name and score.
function displayPlayers() {
    // Remove current list to prevent duplication
    $('.npcSquare').remove();
    $('.pcSquare').remove();
    $('.selected').remove();
    var square;
    var nameLabel;
    var initLabel;
    var linebreak;
    var foo = document.getElementById("playerListArea");
    var foo1 = document.getElementById("gonePlayersArea");
    
    // Iterate through. If PC, give the box a green box. If NPC, blue.
    for (index = 0; index < list.length; index++) {
        square = document.createElement("div");
        if (list[index].npc) {
            square.className = 'npcSquare';
        } else {
            square.className = 'pcSquare';
        }
        // When user clicks on the square, have it select that player.
        square.onclick = choosePlayer;
        square.id = index.toString();
        nameLabel = document.createElement("span");
        nameLabel.className = "nameLabel";
        if (list[index].seize) {
            nameLabel.innerHTML = "<b>" + list[index].name + "</b>";
        } else {
            nameLabel.innerHTML = list[index].name;
        }
        initLabel = document.createElement("span");
        initLabel.className = "initLabel";
        initLabel.innerHTML = list[index].totalScore;
        linebreak = document.createElement("br");
        square.appendChild(nameLabel);
        square.appendChild(linebreak);
        square.appendChild(initLabel);
        
        // If the player has taken their action, put them in the back section of the list.
        if (list[index].actionTaken) {
            foo1.appendChild(square);
        } else {
            foo.appendChild(square);
        }
    }
    
    // If a player is already selected, select that player again after redraw
    // If not, hide the toolbox and remove player button.
    if (selectedPlayer !== null) {
        index = list.indexOf(selectedPlayer);
        document.getElementById(index).className = "selected";
    } else {
        document.getElementById("toolbox").className = "hidden";
        document.getElementById("removePlayerButton").className = "hidden";
    }
}

// Function for when user clicks on a player element in the list
function choosePlayer() {
    // If there is already one selected, set it back to the default color
    if (selectedPlayer !== null) {
        index = list.indexOf(selectedPlayer);
        if (selectedPlayer.npc) {
            document.getElementById(index).className = "npcSquare";    
        } else {
            document.getElementById(index).className = "pcSquare";
        }
    }
    
    // If the one clicked is the one already selected, set it to default color and
    // hide the toolbox/remove player button.
    if (list[Number(this.id)] === selectedPlayer) {
        if (selectedPlayer.npc) {
            document.getElementById(this.id).className = "npcSquare";    
        } else {
            document.getElementById(this.id).className = "pcSquare";
        }
        document.getElementById("toolbox").className = "hidden";
        document.getElementById("removePlayerButton").className = "hidden";
        selectedPlayer = null;
    } else {
        // If nothing selected or different selected, change the color to a red outline
        // and change selected Player to the one chosen.
        document.getElementById(this.id).className = "selected";
        selectedPlayer = list[Number(this.id)];
        document.getElementById("toolbox").className = "toolbox";
        document.getElementById("removePlayerButton").className = "optionButton";
        setOptionsList(); // Add the toolbox
    }
}

// Log a message to the log area
function logMessage(string) {
    var message = document.createElement("span");
    message.innerHTML = string;
    var parent = document.getElementById("logArea");
    //parent.appendChild(message);
    parent.insertBefore(message, parent.firstChild);
    var linebreak = document.createElement("br");
    parent.insertBefore(linebreak, message);
}

// Delete a player from the list.
function removePlayer() {
    if (selectedPlayer !== null) {
        index = list.indexOf(selectedPlayer);
        if (index > -1) {
            list.splice(index, 1);
            logMessage(selectedPlayer.name + " has been removed from combat.");
        }
    }
    selectedPlayer = null;
    sortPlayers();
}

// Modifies the total initiative score.
function modTotalScore() {
    int = Number(document.getElementById("modScoreSpin").value);
    
    if (selectedPlayer !== null && int !== 0) {
        selectedPlayer.totalScore += int;
        logMessage(selectedPlayer.name + " has changed initiative score by " + int + ".");
        sortPlayers();
    }
}

// Modifies the base score (for NPCs)
function modBase() {
    int = Number(document.getElementById("modBaseSpin").value);
    
    if (selectedPlayer !== null && int !== 0 && selectedPlayer.npc) {
        selectedPlayer.totalScore += int;
        selectedPlayer.base += int;
        logMessage(selectedPlayer.name + " has modified base and total score by " + int + "."); 
        sortPlayers();
    }
}

// Modifies score based off value passed
function modScore(i) {
    if (selectedPlayer !== null) {
        selectedPlayer.totalScore += i;
        logMessage(selectedPlayer.name + " has changed initiative score by " + i + ".");
        sortPlayers();
    }
}

// Modifies the number of dice rolled. Done when NPCs switch matrix modes, go astral,
// or get modified reflexes
function modDice() {
    int = Number(document.getElementById("modDiceSpin").value);
    if (selectedPlayer !== null && int !== 0 && selectedPlayer.npc) {
        // Check to make sure they don't go above 5 or below 1.
        if ((selectedPlayer.dice + int) > 5) {
            alert("Takes player above maximum of +5d6. Check and try again.");
        } else if ((selectedPlayer.dice + int) < 1) {
            alert("Takes player below minimum of +1d6. Check and try again.");
        } else {
            // Immediately boost or lower score by the number of rolled dice.
            selectedPlayer.dice = selectedPlayer.dice + int;
            var total = 0;
            for (index = 0; index < Math.abs(int); index++) {
                total = total + getRandomInt();
            }
            if (int < 0) {
                selectedPlayer.totalScore = selectedPlayer.totalScore - total;
                logMessage(selectedPlayer.name + " has removed " + Math.abs(int) + " dice and removed " + total + " score.");
            } else {
                selectedPlayer.totalScore = selectedPlayer.totalScore + total;
                logMessage(selectedPlayer.name + " has added " + int + " dice and added " + total + " score.");
            }
        }
        sortPlayers();
    }
}

// This function will lower initiative for interrupt, called shots, or other 
// actions like Full defense. 
function checkInit(i)
{
    var e;
    if (i === 1)
    {
        e = document.getElementById("calledShotSelect");
        switch (e.options[e.selectedIndex].text)
        {
            case ("Shake Up"):
            case ("Gut"):
            case ("Foot"):
            case ("Hand"):
            case ("Jaw"):
            case ("Shoulder/Upper Arm"):
                return 5;
            case ("Ear"):
            case ("Eye"):
            case ("Genitals"):
            case("Knee"):
            case ("Neck"):
            case ("Sternum"):
            case ("Bellringer"):
            case ("Extreme Intimidation"):
                return 10;
            case ("Shake, Rattle, and Boom!"):
                return 8;
            case ("Shake, Rattle, and Pop!"):
                return 6;
            default:
                return 0;
        }
    } else if (i === 2) {
        e = document.getElementById("interruptSelect");
        switch (e.options[e.selectedIndex].text)
        {
            case ("Block"):
            case ("Dodge"):
            case ("Hit the Dirt"):
            case ("Parry"):
            case ("Run For Your Life"):
            case ("Dive on the Grenade"):
            case ("Protecting the Principle"):
            case ("Shadow Block"):
            case ("Dive for Cover"):
                return 5;
            case ("Counterstrike"):
            case ("Reversal"):
            case ("Riposte"):
                return 7;
            case ("Full Defense"):
            case ("Right Back At Ya!"):
            case ("Sacrifice Throw"):
                return 10;
            default:
                return 0;
        }
    } else if (i === 3) {
        e = document.getElementById("otherActionSelect");
        switch (e.options[e.selectedIndex].text)
        {
            case ("Full Offense"):
            case ("Intercept"):
            case ("Pre-emptive Block"):
            case ("Pre-emptive Dodge"):
            case ("Pre-emptive Parry"):
            case ("Push"):
            case ("Subdue"):
                return 5;
            case ("Finishing Move"):
            case ("Throw Person"):
                return 10;
            default:
                return 0;
        }
    } else {
        return 0;
    }
}

// Changes settings on forms depending if the customer is an NPC or PC
function setOptionsList() {
    if (!selectedPlayer.npc) {
        document.getElementById("modDiceSpin").disabled = true;
        document.getElementById("diceModButton").disabled = true;
        document.getElementById("modBaseSpin").disabled = true;
        document.getElementById("baseModButton").disabled = true;
    } else {
        document.getElementById("modDiceSpin").disabled = false;
        document.getElementById("diceModButton").disabled = false;
        document.getElementById("modBaseSpin").disabled = false;
        document.getElementById("baseModButton").disabled = false;
    }
    if (selectedPlayer.seize) {
        document.getElementById("seizeButton").value = "Remove Seize the Initiative";
    } else {
        document.getElementById("seizeButton").value = "Seize the Initiative";
    }
    document.getElementById("owLabel").innerHTML = "Current Score: " + selectedPlayer.overwatch;
}

// Add options to the Toolbox
function addOptionsButtons() {
    var listItem;
    var selectList;
    var newButton;        
// Begin Called Shot List
    var calledShots = ["Shake Up",
        "Gut",
        "Foot",
        "Hand",
        "Jaw",
        "Shoulder/Upper Arm",
        "Ear",
        "Eye",
        "Genitals",
        "Knee",
        "Neck",
        "Sternum",
        "Bellringer",
        "Extreme Intimidation",
        "Shake, Rattle, and Boom!",
        "Shake, Rattle, and Pop!"
    ];
    calledShots.sort();
    for (index = 0; index < calledShots.length; index++) {
        listItem = document.createElement("option");
        listItem.value = calledShots[index].toString();
        listItem.text = calledShots[index].toString();
        selectList = document.getElementById("calledShotSelect");
        selectList.options.add(listItem);
    }
    newButton = document.createElement("input");
    newButton.type = "button";
    newButton.value = "Called Shot";
    newButton.onclick = function() {
        if (selectedPlayer !== null) {
            i = (checkInit(1)*-1);
            modScore(i);
            e = document.getElementById("calledShotSelect");
            logMessage(selectedPlayer.name + " was affected by " + e.options[e.selectedIndex].text + ". Subtracted " + i + " from score.");
        }
    };
    document.getElementById("calledShotArea").appendChild(newButton);
// End Called Shot
// Begin Interrupt Actions List
    var interruptActions = ["Block",
        "Dodge",
        "Hit the Dirt",
        "Parry",
        "Run For Your Life",
        "Dive on the Grenade",
        "Protecting the Principle",
        "Shadow Block",
        "Dive for Cover",
        "Counterstrike",
        "Reversal",
        "Riposte",
        "Full Defense",
        "Right Back At Ya!",
        "Sacrifice Throw"      
    ];
    interruptActions.sort();
    for (index = 0; index < interruptActions.length; index++) {
        listItem = document.createElement("option");
        listItem.value = interruptActions[index].toString();
        listItem.text = interruptActions[index].toString();
        selectList = document.getElementById("interruptSelect");
        selectList.options.add(listItem);
    }
    newButton = document.createElement("input");
    newButton.type = "button";
    newButton.value = "Interrupt";
    newButton.onclick = function() {
        if (selectedPlayer !== null) {
            i = checkInit(2);
            if (selectedPlayer.totalScore >= i) {
                modScore(-i);
                e = document.getElementById("interruptSelect");
                logMessage(selectedPlayer.name + " used " + e.options[e.selectedIndex].text + ". Subtracted " + i + " from score.");
            } else {
                alert("Player's initiative is " + selectedPlayer.totalScore + ". Needs " + i + " or higher.");
            }
        }
    };
    document.getElementById("interruptArea").appendChild(newButton);
// End Interrupt Actions
// Begin Other Actions
    var otherActions = ["Full Offense",
        "Intercept",
        "Pre-emptive Block",
        "Pre-emptive Dodge",
        "Pre-emptive Parry",
        "Push",
        "Subdue",
        "Finishing Move",
        "Throw Person"
    ];
    otherActions.sort();
    for (index = 0; index < otherActions.length; index++) {
        listItem = document.createElement("option");
        listItem.value = otherActions[index].toString();
        listItem.text = otherActions[index].toString();
        selectList = document.getElementById("otherActionSelect");
        selectList.options.add(listItem);
    }
    newButton = document.createElement("input");
    newButton.type = "button";
    newButton.value = "Other Action";
    newButton.onclick = function() {
        if (selectedPlayer !== null) {
            i = checkInit(3);
            if (selectedPlayer.totalScore >= i) {
                modScore(-i);
                e = document.getElementById("otherActionSelect");
                logMessage(selectedPlayer.name + " used " + e.options[e.selectedIndex].text + ". Subtracted " + i + " from score.");
            } else {
                alert("Player's initiative is " + selectedPlayer.totalScore + ". Needs " + i + " or higher.");
            }
        }
    };
    document.getElementById("otherActionArea").appendChild(newButton);
    
}

// Toggles Seize the Initiative, mainly there if GM accidentally adds
function toggleSeize() {
    if (selectedPlayer !== null) {
        selectedPlayer.seize = !selectedPlayer.seize;
        if (selectedPlayer.seize) {
            logMessage(selectedPlayer.name + " is Seizing the Initiative!");
        } else {
            logMessage(selectedPlayer.name + " is no longer Seizing the Initiative.");
        }
        sortPlayers();
        setOptionsList();
    }
}

// Function does a quick +1 or -1 to total score. Also reduces base score
// for auto-roll. Used for when NPCs or PCs take a wound or get healed.
function quickMod(opt) {
    if (selectedPlayer !== null) {
        if (opt === "+") {
            logMessage(selectedPlayer.name + " has healed a wound (+1 Initiative).");
            if (selectedPlayer.npc) {
                selectedPlayer.totalScore++;
                selectedPlayer.base++;
            } else {
                selectedPlayer.totalScore++;
            }
        } else if (opt === "-") {
            logMessage(selectedPlayer.name + " has sustained a wound. (-1 Initiative).");
            if (selectedPlayer.npc) {
                selectedPlayer.totalScore--;
                selectedPlayer.base--;
            } else {
                selectedPlayer.totalScore--;
            }
        }
        sortPlayers();
    }
}

/***********************
 * Overwatch Functions *
 ***********************/

// Adds or subtracts from Overwatch score by the number selected in the spinner
function modOW() {
    if (selectedPlayer !== null) {
        i = Number(document.getElementById("owSpin").value);
        selectedPlayer.overwatch = selectedPlayer.overwatch + i;
        if (selectedPlayer.overwatch < 0) {
            selectedPlayer.overwatch = 0;
        }
        document.getElementById("owSpin").value = 0;
        logMessage(selectedPlayer.name + " has changed Overwatch score to " + selectedPlayer.overwatch);
        convergeCheck(); // Checks if player has reached convergence.
    }
}

// Checks if player has reached Convergence (Overwatch of 40 or more)
function convergeCheck() {
    if (selectedPlayer.overwatch >= 40) {
        alert(selectedPlayer.name + " has reached convergence at score " + selectedPlayer.overwatch);
    }
    document.getElementById("owLabel").innerHTML = "Current score: " + selectedPlayer.overwatch.toString();
}

// If user reboots device, then set the overwatch score to 0.
function rebootDevice() {
    if (selectedPlayer !== null) {
        selectedPlayer.overwatch = 0;
        convergeCheck();
        logMessage(selectedPlayer.name + " has rebooted. Overwatch now 0.");
    }
}

// Every 15 minutes, GM rolls 2 dice and adds to the Overwatch score.
function ow15() {
    if (selectedPlayer !== null) {
        randomNum = 0;
        for (x = 0; x < 2; x++) {
            randomNum = randomNum + getRandomInt();
        }
        selectedPlayer.overwatch = selectedPlayer.overwatch + randomNum;
        convergeCheck();
    }
}


// For testing purposes, adds a variety of players.
function testPlayers() {
    var p1 = new Player("Striker", 21, 0, 21, false, false);
    var p2 = new Player("Snowe", 12, 0, 12, false, true);
    var p3 = new Player("Gabby", 20, 0, 20, false, false);
    var p4 = new Player("Saergent", 14, 2, 23, true, false);
    var p5 = new Player("Grunts", 9, 1, 12, true, false);
    var p6 = new Player("Link", 15, 0, 15, false, false);
    list.push(p1);
    list.push(p2);
    list.push(p3);
    list.push(p4);
    list.push(p5);
    list.push(p6);
    sortPlayers();
}
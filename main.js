/************************************************
 * Author: Robert Thayer - rthayer@alum.ups.edu *
 * Twitter: @WoWMonk                            *
 * Project: Shadowrun 5e Initiative Tracker     *
 ************************************************/

// VARIABLES
var list = [], // Array to hold players in the game
    pass = 1, // Element holds the current combat pass
    selectedPlayer = null, // Element holds the Player object of the currently selected player
	selectedPlayerId = null, // holding on to the id of the last selected player.
    x, // Counter variable
    i, // Counter variable
    index, // Counter variable for array
    randomNum, // Stores the random number generated by getRandomInt
    score, // Holds total score of the selected random numbers
    int, // Counter variable
    p1, // Holder for a player object
    hits = 0,
    numOfDiceRolled = 0,
    ones = 0,
    skillNum = 0,
    rNum = 0,
    weaponDamage = 0,
    totalDamage = 0,
    netHits = 0,
    armor = 0,
    maxArmor = 0,
    aDice = 0,
    armorSoak = 0,
    aSkill = 0,
    total = 0;

// Create an alert
function setAlert(message, id, color) {
    var alert = document.createElement("div");
    if (color === 1) {
        alert.setAttribute("class", "alert alert-success fade");
    } else {
        alert.setAttribute("class", "alert alert-danger fade");
    }
    alert.setAttribute("role", "alert");
    alert.id = id;
    id = "#" + id;
    alert.innerHTML = message;
    document.getElementById("alerts").appendChild(alert);
    $(id).delay(200).addClass("in");
    setInterval(function () {$("#alerts").empty(); }, 10000);
}

// Hide provided element
function hideElement(element) {
    "use strict";
    if (!element.classList.contains("hidden" || "show")) {
        element.classList.add("hidden");
    } else if (element.classList.contains("show")) {
        element.classList.remove("show");
        element.classList.add("hidden");
    }
}

// Show provided element
function showElement(element) {
    "use strict";
    if (element.classList.contains("hidden")) {
        element.classList.remove("hidden");
    }
}

// Change button color
function changeButton(element, color) {
    "use strict";
    var currentClass = element.className,
        newClass = currentClass,
        buttonType;
    
    switch (color) {
    case ("white"):
        buttonType = "default";
        break;
    case ("blue"):
        buttonType = "primary";
        break;
    case ("green"):
        buttonType = "success";
        break;
    case ("lgtBlue"):
        buttonType = "info";
        break;
    case ("orange"):
        buttonType = "warning";
        break;
    case ("red"):
        buttonType = "danger";
        break;
    default:
        buttonType = "default";
        break;
    }
    
    switch (currentClass) {
    case (currentClass.indexOf("btn-default") > -1):
        newClass = currentClass.replace("default", buttonType);
        break;
    case (currentClass.indexOf("btn-primary") > -1):
        newClass = currentClass.replace("primary", buttonType);
        break;
    case (currentClass.indexOf("btn-success") > -1):
        newClass = currentClass.replace("success", buttonType);
        break;
    case (currentClass.indexOf("btn-info") > -1):
        newClass = currentClass.replace("info", buttonType);
        break;
    case (currentClass.indexOf("btn-warning") > -1):
        newClass = currentClass.replace("warning", buttonType);
        break;
    case (currentClass.indexOf("btn-danger") > -1):
        newClass = currentClass.replace("danger", buttonType);
        break;
    default:
        newClass = currentClass.concat(" btn-default");
        break;
    }
    element.className = newClass;
}

// Constructor for Player class
function Player(name, baseScore, dice, totalScore, npc, seize) {
    "use strict";
    this.name = name; // Name of character
    this.npc = npc; // True if auto-rolled, False if not
    this.base = baseScore; // Base score for NPCs
    this.dice = dice; // Dice to roll for NPCs
    this.actionTaken = false; // Whether the player has taken an action this turn.
    this.totalScore = totalScore; // Holds the current initiative score total
    // Function to determine if this player is tied with another player. Returns true
    // if they are tied, false if not.
    this.isTied = function (p1) {
        return (this.totalScore === p1.totalScore);
    };
    this.seize = seize;
    this.overwatch = 0;
}

// Log a message to the log area
function logMessage(string) {
    "use strict";
    var message = document.createElement("span"),
        parent = document.getElementById("logArea"),
        linebreak = document.createElement("br");
    message.innerHTML = string;
    //parent.appendChild(message);
    parent.insertBefore(message, parent.firstChild);
    parent.insertBefore(linebreak, message);
}

// Toggles the damage section to be disabled or enabled.
function damageSection(state) {
    "use strict";
    document.getElementById("weaponSpin").disabled = state;
    document.getElementById("armorSpin").disabled = state;
    document.getElementById("maxArmorSpin").disabled = state;
    document.getElementById("aRollDiceButton").disabled = state;
    document.getElementById("aDiceSpin").disabled = state;
    document.getElementById("aSkillSpin").disabled = state;
}

// Enables the GM hit activation
function activateForm() {
    "use strict";
    if (document.getElementById("manualCheck").checked) {
        damageSection(false);
        document.getElementById("manualHitSpin").disabled = false;
    } else {
        damageSection(true);
        document.getElementById("manualHitSpin").disabled = true;
    }
}

/******************
 * Sort Functions *
 ******************/

// Compare function. Compares Seize the Initiative first. If a player is Seizing
// then put at the top. Otherwise, compare by total score with higher on top.
function compareByScore(a, b) {
    "use strict";
    if ((a.seize && b.seize) || (!a.seize && !b.seize)) {
        i = b.totalScore - a.totalScore;
        return i;
    } else if (a.seize && !b.seize) {
        return -1;
    } else {
        return 1;
    }
}

// Sets spinners in the mod area to 0.
function resetSpinners() {
    "use strict";
    document.getElementById("modScoreSpin").value = 0;
    document.getElementById("modDiceSpin").value = 0;
    document.getElementById("modBaseSpin").value = 0;
}

// Changes settings on forms depending if the customer is an NPC or PC
function setOptionsList() {
    "use strict";
    if (!selectedPlayer.npc) {
        document.getElementById("modDiceSpin").disabled = true;
        document.getElementById("diceModButton").disabled = true;
		document.getElementById("modBaseSpin").disabled = true;
        document.getElementById("baseModButton").disabled = true;
    } else {
        document.getElementById("modDiceSpin").disabled = false;
        document.getElementById("diceModButton").disabled = false;
        document.getElementById("modBaseSpin").disabled = false;
        document.getElementById("baseModButton").disabled = false;
    }
    if (selectedPlayer.seize) {
        document.getElementById("seizeButton").value = "Remove Seize the Initiative";
    } else {
        document.getElementById("seizeButton").value = "Seize the Initiative";
    }
    document.getElementById("owLabel").innerHTML = "Current Score: " + selectedPlayer.overwatch;
}



// Function for when user clicks on a player element in the list
// **** POSSIBLE ISSUE WITH THE ID ****
function choosePlayer() {
    
    // Get ID of square
    var id = this.id;
    
    $('.npcsquare').removeClass('active');
    $('.pcsquare').removeClass('active');
    // If the one clicked is the one already selected, toggle the select.  hide the toolbox/remove player button.
    if (id == selectedPlayerId) {
		hideElement(document.getElementById("toolbox"));
		hideElement(document.getElementById("removePlayerButton"));
		document.getElementById(selectedPlayerId).innerHTML=(selectedPlayer.name + "<br>" + selectedPlayer.totalScore);
		selectedPlayer = null;
		selectedPlayerId = null;
    } else {
        // If selection is new, establish a new selectedPlayer
		document.getElementById(id).classList.add('active');
		if (selectedPlayerId !== null) {
			document.getElementById(selectedPlayerId).innerHTML=(selectedPlayer.name + "<br>" + selectedPlayer.totalScore);
		}
		selectedPlayer = list[Number(id)];
		selectedPlayerId = id;
		showElement(document.getElementById("toolbox"));
		showElement(document.getElementById("removePlayerButton"));
		document.getElementById("removePlayerButton").innerHTML=("Remove " + selectedPlayer.name);
		document.getElementById(id).innerHTML = (selectedPlayer.name + "<br>Selected<br>" + list[id].totalScore);
		setOptionsList(); // Add the toolbox
	}
}

// Take the list of players and display them in a list with name and score.
function displayPlayers() {
    "use strict";
    var square,
        mainLabel,
        nameLabel,
        initLabel,
        linebreak,
		foo = document.getElementById("playerListArea"),
        foo1 = document.getElementById("gonePlayersArea");
    // Remove current list to prevent duplication
    foo.innerHTML = "";
    foo1.innerHTML = "";
    
    
    // Iterate through. If PC, give the box a green box. If NPC, blue.
    for (index = 0; index < list.length; index += 1) {
        square = document.createElement("input");
        mainLabel = document.createElement("span");
        linebreak = document.createElement("br");
        nameLabel = document.createElement("span");
		
		if (list[index].seize) {
            nameLabel.innerHTML = "<b>" + list[index].name + "</b>";
        } else {
            nameLabel = document.createTextNode(list[index].name);
        }
        
		initLabel = document.createTextNode(list[index].totalScore);
        	
		if (list[index].npc) {
            mainLabel.className = 'npcsquare btn btn-primary';
        } else {
            mainLabel.className = 'pcsquare btn btn-success';
        }
        // When user clicks on the square, have it select that player.
        mainLabel.onclick = choosePlayer;

		square.name = "playerOptions";
        square.type = "radio";
        square.id = "option" + index.toString();
        mainLabel.id = index.toString();

        mainLabel.appendChild(square);

        mainLabel.appendChild(nameLabel);
        mainLabel.appendChild(linebreak);
        mainLabel.appendChild(initLabel);
		
        if (list[index].actionTaken) {
            foo1.appendChild(mainLabel);
        } else {
            foo.appendChild(mainLabel);
        }

    }
    
    // If a player is already selected, select that player again after redraw
    // If not, hide the toolbox and remove player button.
    if (selectedPlayerId === null) {
        hideElement(document.getElementById("toolbox"));
        hideElement(document.getElementById("removePlayerButton"));
		} else {
		document.getElementById(selectedPlayerId).innerHTML = (selectedPlayer.name + "<br>Selected<br>" + selectedPlayer.totalScore);
	}
}

// Sorts the player list. Resets the spinners. Displays players.
function sortPlayers() {
    "use strict";
    list.sort(compareByScore);
    resetSpinners();
    displayPlayers();
}

// Roll a dice, returns 1 through 6.
function getRandomInt() {
    "use strict";
    return Math.floor((Math.random() * 6) + 1);
}

// Determines total score for NPCs by rolling the selected number of dice and
// adding to current score.
function getTotalScore(base, dice) {
    "use strict";
    randomNum = 0;
    for (x = 0; x < dice; x += 1) {
        randomNum = randomNum + getRandomInt();
    }
    score = Number(base) + Number(randomNum);
    return score;
}

// Go to the next round. Gather scores for PCs and roll for NPCs. Prompt to check for STI.
function nextRound() {
    "use strict";
    pass = 1;
    
    // Reset players. Set their action taken flag to false.
    for (index = 0; index < list.length; index += 1) {
        list[index].seize = false;
        list[index].actionTaken = false;
        if (list[index].npc) {
            list[index].totalScore = getTotalScore(list[index].base, list[index].dice);
        } else {
            var score = prompt("What is " + list[index].name + "'s initiative score this round?", "");
            if (!isNaN(Number(score)) && Number(score) > 0) {
                list[index].totalScore = Number(score);
            } else {
                prompt("Invalid input. Please enter " + list[index].name + "'s initiative score.", "");
            }
        }
    }
    setAlert("<strong>Seize the Initiative</strong> If any players are Seizing The Initiative this round, please select them from the list now.", "seizeAlert", 1);
}

// Goes to next combat pass. If no one else has turns, go to next round.
function nextPass() {
    var roundDone = true;
    
    // Subtract 10 from everyone's score
    for (index = 0; index < list.length; index += 1) {
        list[index].totalScore = list[index].totalScore - 10;
        
        // Check if anyone still has positive initiative
        if (list[index].totalScore > 0) {
            roundDone = false;
            list[index].actionTaken = false;
        }
    }
    
    // If not actions remain, go to the next round
    if (roundDone) {
        document.getElementById("nextPlayerLabel").innerHTML = "Round Complete. Gathering new scores.";
        logMessage("Round Complete.");
        nextRound();
    } else {
        // If actions do remain, increment pass counter.
        document.getElementById("nextPlayerLabel").innerHTML = "Next Pass.";
        pass += 1;
        logMessage("Beginning Combat Pass " + pass + ".");
    }
}

// Goes through array to find the next player who has an action available this
// pass. If none, goes to next pass or next round.
function getNextPlayer() {
    "use strict";
    if (list.length > 0) {
        var allActionsTaken = true,
            playerString = ""; // Holds the string to return for who is up next.// Tests if all actions have been taken.
        p1 = null;
        
        for (index = 0; index < list.length; index += 1) {
            x = list[index]; // Hold the current player in the iteration
            // Determine if current player can take an action
            if ((!x.actionTaken) && (x.totalScore > 0)) {
                // Compare to previous player to see if tied
                if (p1 !== null) {
                    if (!x.isTied(p1) || (p1.seize && !x.seize)) {
                        break;
                    } else {
                        // If players are tied, add them both to the label.
                        playerString = playerString.concat(" & ");
                        playerString = playerString.concat(x.name + ": " + x.totalScore.toString());
                        x.actionTaken = true;
                        allActionsTaken = false;
                        p1 = x; // Check next player
                    }
                } else {
                    // If this is first player, add name to the list and go to next player
                    playerString = playerString.concat(x.name + ": " + x.totalScore.toString());
                    x.actionTaken = true;
                    allActionsTaken = false;
                    p1 = x;
                }
            }
        }
        
        // If the list fully iterates and no one has a turn available, go to the next combat pass.
        if (allActionsTaken) {
            logMessage("All players have gone this turn. Combat pass " + pass + " complete.");
            nextPass();
        } else {
            // Otherwise, set the next player label to who is going next.
            document.getElementById("nextPlayerLabel").innerHTML = playerString;
            logMessage(playerString + " have taken their actions.");
        }
        // Hide the new player form
        document.getElementById("passLabel").innerHTML = "Combat pass:" + pass;
        hideElement(document.getElementById("newPlayerDiv"));
        showElement(document.getElementById("newPlayerButton"));
        sortPlayers(); // Sort the player list.
    }
}

/***************************
 * Player Helper Functions *
 ***************************/

/*
 * @param int base: Base score of NPC
 * @param int dice: Number of additional dice for NPC
 * @returns int score: Returns total score of base + dice total
 */

// Check the roll for glitches
function glitchCheck(numDice, ones, hits) {
    "use strict";
    var glitchLabel = document.getElementById("glitchLabel"),
        half = Math.floor(numDice / 2);
    if (ones > half) {
        if (hits === 0) {
            glitchLabel.innerHTML = "CRITICAL GLITCH";
        } else {
            glitchLabel.innerHTML = "GLITCH";
        }
    } else {
        glitchLabel.innerHTML = "";
    }
}

// Success checker
function getHits(numDice, edged) {
    "use strict";
    i = 0;
    var sixes = 0,
        ones = 0;
    for (x = 0; x < numDice; x += 1) {
        randomNum = getRandomInt();
        if (randomNum >= 5) {
            i += 1;
        }
        if (randomNum === 6) {
            sixes += 1;
        }
        if (randomNum === 1) {
            ones += 1;
        }
    }
    if (edged) {
        while (sixes > 0) {
            randomNum = getRandomInt();
            if (randomNum >= 5) {
                i += 1;
            }
            if (randomNum === 6) {
                sixes += 1;
            }
            if (randomNum === 1) {
                ones += 1;
            }
            sixes -= 1;
        }
    }
    glitchCheck(numDice, ones, i);
    return i;
}

// Take info from form and roll dice and determine number of successes.
function rollDice() {
    "use strict";
    var hitsLabel = document.getElementById("hitsLabel"),
        glitchLabel = document.getElementById("glitchLabel"),
        edgeCheck = document.getElementById("edgeCheck").checked;
    numOfDiceRolled = Number(document.getElementById("numOfDiceSpin").value);
    hits = getHits(numOfDiceRolled, edgeCheck);
    hitsLabel.innerHTML = "Hits: " + hits;
    logMessage("GM Rolled " + numOfDiceRolled + " dice (edge: " + edgeCheck + ") and got " + hits + " hits.");
    if (!edgeCheck && (hits < numOfDiceRolled)) {
        showElement(document.getElementById("secondChanceButton"));
    } else {
        hideElement(document.getElementById("secondChanceButton"));
    }
}

function secondChance() {
    "use strict";
    var dice = numOfDiceRolled - hits,
        newHits = getHits(dice, false) + hits;
    document.getElementById("hitsLabel").innerHTML = "Hits: " + newHits;
    hideElement(document.getElementById("secondChanceButton"));
    glitchCheck(numOfDiceRolled, ones, newHits);
    logMessage("GM used Second Chance and got " + (newHits - hits) + " new hits.");
}

/* Not used in Shadowrun yet
// Take info from combat form and roll dice and determine damage.
function combatRollDice() {
    "use strict";
    var damageLabel = document.getElementById("damageLabel"),
        hitsBox = document.getElementById("manualHitSpin");
    numOfDiceRolled = Number(document.getElementById("cNumOfDiceSpin").value);
    skillNum = Number(document.getElementById("cSkillSpin").value);
    rNum = Number(document.getElementById("rSpin").value);
    hits = getHits(numOfDiceRolled, skillNum);
    if (hits < rNum) {
        totalDamage = 0;
        damageLabel.innerHTML = "Miss!";
        logMessage("GM Rolled " + numOfDiceRolled + " dice and got " + hits + " hits. This did not beat the R# of " + rNum + ". Miss.");
        damageSection(true);
        hitsBox.value = 0;
    } else {
        netHits = hits - rNum;
        hitsBox.value = netHits;
        damageLabel.innerHTML = "Hit! Net hits: " + netHits + ".";
        logMessage("GM Rolled " + numOfDiceRolled + " dice and got " + hits + " hits. Net hits: " + netHits + ".");
        damageSection(false);
    }
}

function armorRollDice() {
    "use strict";
    var damageLabel = document.getElementById("damageLabel");
    weaponDamage = Number(document.getElementById("weaponSpin").value);
    if (document.getElementById("manualCheck").checked) {
        netHits = Number(document.getElementById("manualHitSpin").value);
    }
    totalDamage = (netHits + 1) * weaponDamage;
    armor = Number(document.getElementById("armorSpin").value);
    maxArmor = Number(document.getElementById("maxArmorSpin").value);
    aDice = Number(document.getElementById("aDiceSpin").value);
    aSkill = Number(document.getElementById("aSkillSpin").value);
    armorSoak = getHits(aDice, aSkill) * armor;
    if (armorSoak > maxArmor) {
        armorSoak = maxArmor;
    }
    total = totalDamage - armorSoak;
    if (total < 0) { total = 0; }
    damageLabel.innerHTML = "Weapon hits for " + totalDamage + ". Armor blocks " + armorSoak + ". Total damage: " + total + ".";
    logMessage("Weapon hits for " + totalDamage + ". Armor blocks " + armorSoak + ". Total damage: " + total + ".");
    damageSection(true);
    document.getElementById("manualCheck").checked = false;
    activateForm();
}
*/

// Resets a form to default values
function resetForm(form) {
    "use strict";
    var frm_elements = form.elements,
        field_type;
    for (i = 0; i < frm_elements.length; i += 1) {
        field_type = frm_elements[i].type.toLowerCase();
        switch (field_type) {
        case "text":
        case "password":
        case "textarea":
        case "hidden":
            frm_elements[i].value = "";
            break;
        case "radio":
        case "checkbox":
            if (frm_elements[i].checked) {
                frm_elements[i].checked = false;
            }
            break;
        case "select-one":
        case "select-multi":
            frm_elements[i].selectedIndex = -1;
            break;
        case "number":
            frm_elements[i].value = 1;
            break;
        default:
            break;
        }
        
    }
    hideElement(document.getElementById("diceSpinLabel"));
    hideElement(document.getElementById("diceLabel"));
    hideElement(document.getElementById("diceSpin"));
    document.getElementById("initDiv").classList.remove("col-lg-8");
    document.getElementById("initDiv").classList.add("col-lg-4");
}

// Takes the information provided by the New Player form and creates a Player
// object and adds the list array.
function addPlayer(form) {
    "use strict";
    var name = document.forms.newPlayerForm.nameInput.value,
        npc,
        base,
        dice,
        player,
        seize;
    if (name === "") {
        setAlert("<strong>Oops!</strong> Please enter a name.", "nameAlert", 0);
        return false;
    } else {
        npc = document.forms.newPlayerForm.npcRadio.checked;
        base = Number(document.forms.newPlayerForm.scoreSpin.value);
        dice = Number(document.forms.newPlayerForm.diceSpin.value);
        seize = document.forms.newPlayerForm.seizeCheck.checked;
        
        //Determine score
        if (!npc) {
            score = base - ((pass - 1) * 10);
        } else {
            score = getTotalScore(base, dice) - ((pass - 1) * 10);
        }
        
        // Create the player object
        player = new Player(name, base, dice, score, npc, seize);
        list.push(player); // Adds to the list
        logMessage("New Player " + name + " has been added.");
        resetForm(form); // Resets the new player form
        showElement(document.getElementById("getNextPlayerButton"));
        sortPlayers(); // Sort and display the player list.
        return false; // Do not submit form.
    }
}

// If the Auto-Roll Dice button is checked, show the + d10 area, if not, hide.
function selectNPC() {
    "use strict";
    if (document.getElementById("npcRadio").checked) {
        document.getElementById("diceSpin").disabled = false;
        showElement(document.getElementById("diceSpinLabel"));
        showElement(document.getElementById("diceLabel"));
        showElement(document.getElementById("diceSpin"));
        document.getElementById("initDiv").classList.remove("col-lg-4");
        document.getElementById("initDiv").classList.add("col-lg-8");
    } else {
        document.getElementById("diceSpin").disabled = true;
        hideElement(document.getElementById("diceLabel"));
        hideElement(document.getElementById("diceSpin"));
        hideElement(document.getElementById("diceSpinLabel"));
        document.getElementById("initDiv").classList.remove("col-lg-8");
        document.getElementById("initDiv").classList.add("col-lg-4");
    }
}

// Show the New Player Form when user presses New Player button.
function showNewPlayerForm() {
    "use strict";
    showElement(document.getElementById("newPlayerDiv"));
    hideElement(document.getElementById("newPlayerButton"));
    hideElement(document.getElementById("toolbox"));
}

// Show the dice roller when button is clicked
function showDiceArea() {
    "use strict";
    var diceArea = document.getElementById("rollDiceDiv"),
        diceButton = document.getElementById("diceRollerButton");
    if (diceArea.classList.contains("hidden")) {
        showElement(diceArea);
        diceButton.innerHTML = "Hide Dice Roller";
    } else {
        hideElement(diceArea);
        diceButton.innerHTML = "Show Dice Roller";
    }
}

// Show the combat dice roller when button is clicked
function showCombatArea() {
    "use strict";
    var cDiceArea = document.getElementById("combatRollDiceDiv"),
        cDiceButton = document.getElementById("combatRollerButton");
    if (cDiceArea.classList.contains("hidden")) {
        showElement(cDiceArea);
        cDiceButton.innerHTML = "Hide Combat Dice Roller";
    } else {
        hideElement(cDiceArea);
        cDiceButton.innerHTML = "Show Combat Dice Roller";
    }
}

// Delete a player from the list.
function removePlayer() {
    "use strict";
    if (selectedPlayer !== null) {
        index = list.indexOf(selectedPlayer);
        if (index > -1) {
            list.splice(index, 1);
            logMessage(selectedPlayer.name + " has been removed from combat.");
        }
    }
    selectedPlayer = null;
    sortPlayers();
}

// Modifies the total initiative score.
function modTotalScore() {
    "use strict";
    int = Number(document.getElementById("modScoreSpin").value);
    
    if (selectedPlayer !== null && int !== 0) {
        selectedPlayer.totalScore += int;
        logMessage(selectedPlayer.name + " has changed initiative score by " + int + ".");
        sortPlayers();
    }
}

// Modifies the number of dice rolled. Done when NPCs switch matrix modes, go astral,
// or get modified reflexes
function modDice() {
    var total;
    int = Number(document.getElementById("modDiceSpin").value);
    if (selectedPlayer !== null && int !== 0 && selectedPlayer.npc) {
        // Check to make sure they don't go above 5 or below 1.
        if ((selectedPlayer.dice + int) > 5) {
            setAlert("<strong>Oops!</strong> Takes player above maximum of +5d6. Check and try again.", "diceHighAlert", 0);
        } else if ((selectedPlayer.dice + int) < 1) {
            setAlert("<strong>Oops!</strong> Takes player below minimum of +1d6. Check and try again.", "diceLowAlert", 0);
        } else {
            // Immediately boost or lower score by the number of rolled dice.
            selectedPlayer.dice = selectedPlayer.dice + int;
            total = 0;
            for (index = 0; index < Math.abs(int); index += 1) {
                total = total + getRandomInt();
            }
            if (int < 0) {
                selectedPlayer.totalScore = selectedPlayer.totalScore - total;
                logMessage(selectedPlayer.name + " has removed " + Math.abs(int) + " dice and removed " + total + " score.");
            } else {
                selectedPlayer.totalScore = selectedPlayer.totalScore + total;
                logMessage(selectedPlayer.name + " has added " + int + " dice and added " + total + " score.");
            }
        }
        sortPlayers();
    }
}
    
// Modifies the base score (for NPCs)
function modBase() {
    "use strict";
    int = Number(document.getElementById("modBaseSpin").value);
    
    if (selectedPlayer !== null && int !== 0 && selectedPlayer.npc) {
        selectedPlayer.totalScore += int;
        selectedPlayer.base += int;
        logMessage(selectedPlayer.name + " has modified base and total score by " + int + ".");
        sortPlayers();
    }
}

// Modifies score based off value passed
function modScore(i) {
    "use strict";
    if (selectedPlayer !== null) {
        selectedPlayer.totalScore += i;
		logMessage(selectedPlayer.name + " has changed initiative score by " + i + "." + " selectedPlayer.totalScore is: " + selectedPlayer.totalScore);
        sortPlayers();
		}
}

// Function does a quick +1 or -1 to total score. Also reduces base score
// for auto-roll. Used for when NPCs or PCs take a wound or get healed.
function quickMod(opt) {
    "use strict";
    if (selectedPlayer !== null) {
        if (opt === "+") {
            logMessage(selectedPlayer.name + " has gained 1 initiative.");
            if (selectedPlayer.npc) {
                selectedPlayer.totalScore++;
                selectedPlayer.base++;
            } else {
                selectedPlayer.totalScore++;
            }
        } else if (opt === "-") {
            logMessage(selectedPlayer.name + " has lost 1 initiative.");
            if (selectedPlayer.npc) {
                selectedPlayer.totalScore--;
                selectedPlayer.base--;
            } else {
                selectedPlayer.totalScore--;
            }
        }
        sortPlayers();
    }
}

// This function will lower initiative for interrupt, called shots, or other 
// actions like Full defense. 
function checkInit(i) {
    var e;
    if (i === 1) {
        e = document.getElementById("calledShotSelect");
        switch (e.options[e.selectedIndex].text) {
        case ("Shake Up"):
            return 5;
        case ("Extreme Intimidation"):
            return 10;
        case ("Shake, Rattle, and Boom!"):
            return 8;
        case ("Shake, Rattle, and Pop!"):
            return 6;
        default:
            return 0;
        }
    } else if (i === 2) {
        e = document.getElementById("interruptSelect");
        switch (e.options[e.selectedIndex].text) {
        case ("Block"):
        case ("Dodge"):
        case ("Hit the Dirt"):
        case ("Parry"):
		case ("Missle Parry"):
		case ("Run For Your Life"):
        case ("Dive on the Grenade"):
        case ("Protecting the Principle"):
        case ("Shadow Block"):
        case ("Dive for Cover"):
		case ("Intercept"):
		case ("Spell Defense (no Free Action)"):
            return 5;
        case ("Counterstrike"):
        case ("Reversal"):
        case ("Riposte"):
            return 7;
        case ("Full Defense"):
        case ("Right Back At Ya!"):
        case ("Sacrifice Throw"):
		case ("Evasive Driving"):
            return 10;
        default:
            return 0;
        }
    } else if (i === 3) {
        e = document.getElementById("otherActionSelect");
        switch (e.options[e.selectedIndex].text) {
        case ("Full Offense"):
        case ("Pre-emptive Block"):
        case ("Pre-emptive Dodge"):
        case ("Pre-emptive Parry"):
        case ("Push"):
        case ("Subdue"):
            return 5;
		case ("Surprised"):
		case ("Finishing Move"):
        case ("Throw Person"):
            return 10;
        default:
            return 0;
        }
    } else {
        return 0;
    }
}

// Add options to the Toolbox
function addOptionsButtons() {
    var listItem,
        e,
        selectList,
        newButton,
// Begin Called Shot List
        calledShots = ["Shake Up",
            "Shake, Rattle, and Boom!",
            "Shake, Rattle, and Pop!",
			"Extreme Intimidation"],
        interruptActions = ["Block",
            "Dodge",
            "Parry",
			"Intercept",
			"Full Defense",
			"Counterstrike",
            "Reversal",
            "Riposte",
			"Missle Parry",
			"Spell Defense (no Free Action)",
			"Hit the Dirt",
			"Evasive Driving",
            "Run For Your Life",
            "Dive on the Grenade",
            "Protecting the Principle",
            "Shadow Block",
            "Dive for Cover",
            "Right Back At Ya!",
            "Sacrifice Throw"],
        otherActions = ["Full Offense",
            "Pre-emptive Block",
            "Pre-emptive Dodge",
            "Pre-emptive Parry",
            "Push",
            "Subdue",
            "Finishing Move",
            "Throw Person",
			"Surprised"];
    calledShots.sort();
    interruptActions.sort();
    otherActions.sort();
                        
    for (index = 0; index < calledShots.length; index += 1) {
        listItem = document.createElement("option");
        listItem.value = calledShots[index].toString();
        listItem.text = calledShots[index].toString();
        selectList = document.getElementById("calledShotSelect");
        selectList.options.add(listItem);
    }
    newButton = document.createElement("button");
    newButton.type = "button";
    newButton.setAttribute("class", "btn btn-default");
    newButton.appendChild(document.createTextNode("Hit by Called"));
    newButton.onclick = function () {
        if (selectedPlayer !== null) {
			logMessage("i at start is: " + i);
			var i = checkInit(1);
            modScore(-i);
            e = document.getElementById("calledShotSelect");
            logMessage(selectedPlayer.name + " was affected by " + e.options[e.selectedIndex].text + ". Subtracted " + i + " from score.");
        }
    };
    document.getElementById("calledShotSpan").appendChild(newButton);
// End Called Shot
// Begin Interrupt Actions List
    
    for (index = 0; index < interruptActions.length; index += 1) {
        listItem = document.createElement("option");
        listItem.value = interruptActions[index].toString();
        listItem.text = interruptActions[index].toString();
        selectList = document.getElementById("interruptSelect");
        selectList.options.add(listItem);
    }
    newButton = document.createElement("button");
    newButton.type = "button";
    newButton.setAttribute("class", "btn btn-default");
    newButton.appendChild(document.createTextNode("Interrupt"));
    newButton.onclick = function () {
        if (selectedPlayer !== null) {
            var i = checkInit(2);
            if (selectedPlayer.totalScore >= i) {
                modScore(-i);
                e = document.getElementById("interruptSelect");
                logMessage(selectedPlayer.name + " used " + e.options[e.selectedIndex].text + ". Subtracted " + i + " from score.");
            } else {
                setAlert("<strong>Oops!</strong> Player's initiative is " + selectedPlayer.totalScore + ". Needs " + i + " or higher.", "tooHighAlert", 0);
            }
        }
    };
    document.getElementById("interruptSpan").appendChild(newButton);
// End Interrupt Actions
// Begin Other Actions
   
    for (index = 0; index < otherActions.length; index += 1) {
        listItem = document.createElement("option");
        listItem.value = otherActions[index].toString();
        listItem.text = otherActions[index].toString();
        selectList = document.getElementById("otherActionSelect");
        selectList.options.add(listItem);
    }
    newButton = document.createElement("button");
    newButton.type = "button";
    newButton.setAttribute("class", "btn btn-default");
    newButton.appendChild(document.createTextNode("Other Action"));
    newButton.onclick = function () {
        if (selectedPlayer !== null) {
            var i = checkInit(3);
            if (selectedPlayer.totalScore >= i) {
                modScore(-i);
                e = document.getElementById("otherActionSelect");
                logMessage(selectedPlayer.name + " used " + e.options[e.selectedIndex].text + ". Subtracted " + i + " from score.");
            } else {
                setAlert("<strong>Oops!</strong> Player's initiative is " + selectedPlayer.totalScore + ". Needs " + i + " or higher.", "tooLowAlert", 0);
            }
        }
    };
    document.getElementById("otherActionSpan").appendChild(newButton);
}

// Toggles Seize the Initiative, mainly there if GM accidentally adds
function toggleSeize() {
    if (selectedPlayer !== null) {
        selectedPlayer.seize = !selectedPlayer.seize;
        if (selectedPlayer.seize) {
            logMessage(selectedPlayer.name + " is Seizing the Initiative!");
        } else {
            logMessage(selectedPlayer.name + " is no longer Seizing the Initiative.");
        }
        sortPlayers();
        setOptionsList();
    }
}

/***********************
 * Overwatch Functions *
 ***********************/

// Checks if player has reached Convergence (Overwatch of 40 or more)
function convergeCheck() {
    if (selectedPlayer.overwatch >= 40) {
        setAlert(selectedPlayer.name + " has reached convergence at score " + selectedPlayer.overwatch, "convergeAlert", 0);
    }
    document.getElementById("owLabel").innerHTML = "Current score: " + selectedPlayer.overwatch.toString();
}

// Adds or subtracts from Overwatch score by the number selected in the spinner
function modOW() {
    if (selectedPlayer !== null) {
        i = Number(document.getElementById("owSpin").value);
        selectedPlayer.overwatch = selectedPlayer.overwatch + i;
        if (selectedPlayer.overwatch < 0) {
            selectedPlayer.overwatch = 0;
        }
        document.getElementById("owSpin").value = 0;
        logMessage(selectedPlayer.name + " has changed Overwatch score to " + selectedPlayer.overwatch);
        convergeCheck(); // Checks if player has reached convergence.
    }
}



// If user reboots device, then set the overwatch score to 0.
function rebootDevice() {
    if (selectedPlayer !== null) {
        selectedPlayer.overwatch = 0;
        convergeCheck();
        logMessage(selectedPlayer.name + " has rebooted. Overwatch now 0.");
    }
}

// Every 15 minutes, GM rolls 2 dice and adds to the Overwatch score.
function ow15() {
    if (selectedPlayer !== null) {
        randomNum = 0;
        for (x = 0; x < 2; x += 1) {
            randomNum = randomNum + getRandomInt();
        }
        selectedPlayer.overwatch = selectedPlayer.overwatch + randomNum;
        convergeCheck();
    }
}

/*
// For testing purposes, adds a variety of players.
function testPlayers() {
    "use strict";
    var p1 = new Player("Striker", 21, 0, 21, false),
        p2 = new Player("Snowe", 12, 0, 12, false),
        p3 = new Player("Gabby", 20, 0, 20, false),
        p4 = new Player("Saergent", 14, 1, 23, true),
        p5 = new Player("Grunts", 9, 1, 12, true),
        p6 = new Player("Link", 15, 0, 15, false);
    list.push(p1);
    list.push(p2);
    list.push(p3);
    list.push(p4);
    list.push(p5);
    list.push(p6);
    sortPlayers();
} */

addOptionsButtons();